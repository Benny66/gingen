package models

import (
	"gorm.io/gorm"
)

func (dao *{{.Model}}Dao) Create(tx *gorm.DB, data *{{.XModel}}Model) (rowsAffected int64, err error) {
	db := tx.Create(data)
	if err = db.Error; db.Error != nil {
		return
	}
	rowsAffected = db.RowsAffected
	return
}

func (dao *{{.Model}}Dao) Update(tx *gorm.DB, id uint, data map[string]interface{}) (rowsAffected int64, err error) {
	db := tx.Model(&{{.XModel}}Model{}).Where("id = ?", id).Updates(data)
	if err = db.Error; db.Error != nil {
		return
	}
	rowsAffected = db.RowsAffected
	return
}

func (dao *{{.Model}}Dao) Delete(tx *gorm.DB, data []int) (rowsAffected int64, err error) {
	db := tx.Where("id in (?)", data).Delete(&{{.XModel}}Model{})
	if err = db.Error; db.Error != nil {
		return
	}
	rowsAffected = db.RowsAffected
	return
}

func (dao *{{.Model}}Dao) FindAll() (list []{{.XModel}}Model, err error) {
	db := dao.gm.Find(&list)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) FindAllWhere(query interface{}, args ...interface{}) (list []{{.XModel}}Model, err error) {
	db := dao.gm.Where(query, args...).Find(&list)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) FindOneWhere(query interface{}, args ...interface{}) (record {{.XModel}}Model, err error) {
	db := dao.gm.Where(query, args...).First(&record)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) FindCountWhere(query interface{}, args ...interface{}) (count int64, err error) {
	db := dao.gm.Model(&{{.XModel}}Model{}).Where(query, args...).Count(&count)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) FindCount() (count int64, err error) {
	db := dao.gm.Model(&{{.XModel}}Model{}).Count(&count)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) Raw(sqlStr string, params ...interface{}) (list []{{.XModel}}Model, err error) {
	db := dao.gm.Debug().Raw(sqlStr, params...).Find(&list)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}
func (dao *{{.Model}}Dao) WhereQuery(query interface{}, args ...interface{}) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Where(query, args...),
	}

}

func (dao *{{.Model}}Dao) WhereUserNameLike(username string) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Where("username like ?", "%"+username+"%"),
	}
}

func (dao *{{.Model}}Dao) WhereDisabled(isDisabled int) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Where("is_disabled = ?", isDisabled),
	}
}

func (dao *{{.Model}}Dao) Paginate(offset, limit int) (count int64, list []{{.XModel}}Model, err error) {
	db := dao.gm.Model(&{{.XModel}}Model{}).Count(&count).Offset(offset).Limit(limit).Find(&list)
	if err = db.Error; db.Error != nil {
		return
	}
	return
}

func (dao *{{.Model}}Dao) Debug() *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Debug(),
	}
}

func (dao *{{.Model}}Dao) Offset(offset int) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Offset(offset),
	}
}

func (dao *{{.Model}}Dao) Limit(limit int) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Limit(limit),
	}
}

func (dao *{{.Model}}Dao) OrderBy(sortFlag, sortOrder string) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Order(sortFlag + " " + sortOrder),
	}
}

func (dao *{{.Model}}Dao) Joins(query string, args ...interface{}) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Joins(query, args),
	}
}

func (dao *{{.Model}}Dao) Preloads(query string) *{{.Model}}Dao {
	return &{{.Model}}Dao{
		dao.gm.Preload(query),
	}
}

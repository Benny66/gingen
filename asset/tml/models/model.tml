package models

import (
	database "{{.ModName}}/db"
	"gorm.io/gorm"
)
type {{.UModuleName}}Interface interface {
    //todo: create your function
	Create(tx *gorm.DB, data *{{.UModuleName}}Model) (rowsAffected int64, err error)
	Update(tx *gorm.DB, id uint, data map[string]interface{}) (rowsAffected int64, err error)
	Delete(tx *gorm.DB, data []int) (rowsAffected int64, err error)
	FindAllWhere(query interface{}, args ...interface{}) (list []{{.UModuleName}}Model, err error)
	FindOneWhere(query interface{}, args ...interface{}) (record {{.UModuleName}}Model, err error)
	FindCountWhere(query interface{}, args ...interface{}) (count int64, err error)
}

var {{.UModuleName}}Dao {{.UModuleName}}Interface = &{{.ModuleName}}Dao{
	gm: database.Orm.DB(),
}

type {{.ModuleName}}Dao struct {
	gm *gorm.DB
}

type {{.UModuleName}}Model struct {
    //todo create your filed
}

func (um {{.UModuleName}}Model) TableName() string {
	return "{{.ModuleName}}"
}